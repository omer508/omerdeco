class Pharmacy:
    pharmacy_name = "City Pharmacy"  # Static attribute
    available_medicines = []         # قائمة الأدوية المتاحة
    sold_medicines = []              # قائمة الأدوية المباعة
    needed_medicines = []            # قائمة الأدوية المطلوبة

    def __init__(self, name, license_number, price, expiration_date):
        self.name = name
        self.license_number = license_number
        self.price = price
        self.expiration_date = expiration_date

    @staticmethod
    def get_pharmacy_info():
        return f"Welcome to {Pharmacy.pharmacy_name}!"

    @classmethod
    def from_string(cls, pharmacist_str):
        name, license_number, price, expiration_date = pharmacist_str.split(',')
        return cls(name, int(license_number), float(price), expiration_date)

    def display_info(self):
        return f"Pharmacist Name: {self.name}, License Number: {self.license_number}, Price: ${self.price}, Expiration Date: {self.expiration_date}"

    @classmethod
    def add_available_medicine(cls, name, quantity, price, expiration_date):
        cls.available_medicines.append({
            'name': name,
            'quantity': quantity,
            'price': price,
            'expiration_date': expiration_date
        })

    @classmethod
    def sell_medicine(cls, name):
        for medicine in cls.available_medicines:
            if medicine['name'] == name:
                if medicine['quantity'] > 0:
                    medicine['quantity'] -= 1
                    cls.sold_medicines.append(medicine.copy())
                    if medicine['quantity'] == 0:
                        cls.available_medicines.pop(cls.available_medicines.index(medicine))
                else:
                    return "Medicine out of stock"
                return
        return "Medicine not available"

    @classmethod
    def add_needed_medicine(cls, name):
        cls.needed_medicines.append(name)

    @classmethod
    def list_available(cls):
        return "Available Medicines:\n" + "\n".join(
            [f"Name: {medicine['name']}, Quantity: {medicine['quantity']}, Price: ${medicine['price']}, Expiration Date: {medicine['expiration_date']}" 
            for medicine in cls.available_medicines])

    @classmethod
    def list_sold(cls):
        return "Sold Medicines:\n" + "\n".join(
            [f"Name: {medicine['name']}, Quantity: {medicine['quantity']}, Price: ${medicine['price']}, Expiration Date: {medicine['expiration_date']}" 
            for medicine in cls.sold_medicines])

    @classmethod
    def list_needed(cls):
        return f"Needed Medicines: {', '.join(cls.needed_medicines)}"

# إنشاء كائن من الكلاس
pharmacist = Pharmacy("Ahmed", 12345, 2.5, "2025-12-31")

# إضافة أدوية إلى القائمة المتاحة
Pharmacy.add_available_medicine("Paracetamol", 10, 2.5, "2025-12-31")
Pharmacy.add_available_medicine("Aspirin", 20, 1.5, "2024-06-30")

# إضافة أدوية إلى قائمة الأدوية المطلوبة
Pharmacy.add_needed_medicine("Ibuprofen")

# بيع دواء
Pharmacy.sell_medicine("Paracetamol")

# عرض المعلومات
print(Pharmacy.get_pharmacy_info())
print('<..............................................>')
print(pharmacist.display_info())
print('<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>')
print(Pharmacy.list_available())
print('<..............................................>')
print(Pharmacy.list_sold())
print('<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>')
print(Pharmacy.list_needed())
print('<..............................................>')








..........................................ز


import random

names = []
try:
    for i in range(9):
        x = input("enter a name: ")
        names.append(x)
    
    groups = []
    while len(groups) < 3:
        group = []
        while len(group) < 3:
            ind = random.randint(0, len(names) - 1)
            if names[ind] not in group:
                group.append(names[ind])
                names.pop(ind)
        groups.append(group)
    
    print(groups)
except ValueError:
    print("wrong input")










    ..............................................................





    class Inventory:
    # Class property
    inventory_space = 0

    # Constructor
    def __init__(self):
        self.items = {} # this will store each item with its quantity as follows: { "canned tomato paste": 10, "Dakwa": 39 }

    # Instance Methods
    def add_item(self, item, quantity):
        new_item = 1
        for i in self.items:
            if item == i:
                self.items[i] += quantity
                new_item = 0
        if new_item == 1:
            self.items[item] = quantity
        Inventory.inventory_space += quantity

    def check_stock(self, item):
        print(f"{item}: {self.items.get(item, 0)}")

    @classmethod
    def merge_inventories(cls, first_inventory, second_inventory):
        merged = cls()
        for item, quantity in first_inventory.items:
            merged.add_item(item, quantity)
        for item in second_inventory.items:
            merged.add_item(item, second_inventory.items[item])
        return merged

    @staticmethod
    def is_valid_quantity(quantity):
        return isinstance(quantity, int) and quantity >= 0
    
    def __str__(self):
        return f"{self.items}"

# Example Usage:
inventory1 = Inventory()
inventory1.add_item("Laptop", 10)
inventory1.add_item("Mouse", 50)
inventory2 = Inventory()
inventory2.add_item("Keyboard", 15)
inventory2.add_item("Mouse", 30)
merged = Inventory.merge_inventories(inventory1, inventory2)
merged.check_stock("Mouse")  # Output: Mouse: 80
print(Inventory.inventory_space)  # Output: 110
print(merged)class Inventory:
    # Class property
    inventory_space = 0

    # Constructor
    def __init__(self):
        self.items = {} # this will store each item with its quantity as follows: { "canned tomato paste": 10, "Dakwa": 39 }

    # Instance Methods
    def add_item(self, item, quantity):
        new_item = 1
        for i in self.items:
            if item == i:
                self.items[i] += quantity
                new_item = 0
        if new_item == 1:
            self.items[item] = quantity
        Inventory.inventory_space += quantity

    def check_stock(self, item):
        print(f"{item}: {self.items.get(item, 0)}")

    @classmethod
    def merge_inventories(cls, first_inventory, second_inventory):
        merged = cls()
        for item, quantity in first_inventory.items:
            merged.add_item(item, quantity)
        for item in second_inventory.items:
            merged.add_item(item, second_inventory.items[item])
        return merged

    @staticmethod
    def is_valid_quantity(quantity):
        return isinstance(quantity, int) and quantity >= 0
    
    def __str__(self):
        return f"{self.items}"

# Example Usage:
inventory1 = Inventory()
inventory1.add_item("Laptop", 10)
inventory1.add_item("Mouse", 50)
inventory2 = Inventory()
inventory2.add_item("Keyboard", 15)
inventory2.add_item("Mouse", 30)
merged = Inventory.merge_inventories(inventory1, inventory2)
merged.check_stock("Mouse")  # Output: Mouse: 80
print(Inventory.inventory_space)  # Output: 110
print(merged)

..........
..............................................................

class items:
    all_items = {}
    
    def __init__(self, name, quantity):
        self.name = name
        self.quantity = quantity
        items.all_items[name] = quantity

    def __str__(self):
        return f"{self.name}, {self.quantity}"

    @classmethod
    def sell(cls, name, quantity):
        for i in cls.all_items:
            if i == name:
                if cls.all_items[name] >= quantity:
                    cls.all_items[name] -= quantity
                    return 0
                return 1
        return 2
    
    @classmethod
    def stock(cls):
        i = 0
        for item in cls.all_items.values():
            i += item
        return i

    @classmethod
    def inventory(cls):
        return str(cls.all_items)

while True:
    try:
        command = input("How can I help you: ")
        if command == "add item":
            item_name = input("what is the item name: ")
            item_quantity = int(input("what is the quantity you want to add: "))
            new_item = 1
            for i in items.all_items:
                if i == item_name:
                    items.all_items[item_name] += item_quantity
                    new_item = 0
                    print("add quantity to existing item")
            if new_item == 1:
                item = items(item_name, item_quantity)
                print("add new item")
        elif command == "sell item":
            item_name = input("what is the item name: ")
            item_quantity = int(input("what is the quantity you want to sell: "))
            i = items.sell(item_name, item_quantity)
            if i == 0:
                print("item sold successfully")
            elif i == 1:
                print("no sufficient quantity")
            elif i == 2:
                print("item not found")
        elif command == "check stock":
            print(items.stock())
        elif command == "check inventory":
            print(items.inventory())
        elif command == "done":
            break
        else:
            print("command not found")
    except ValueError:
        print("quantity must be a number")



        .......................................زز



        class Employee:
    # Class property
    all_employees = []

    # Constructor
    def __init__(self, name, salary, department):
        self.name = name
        self.salary = salary
        self.department = department
        Employee.all_employees.append(self)

    # Instance Methods
    def promote(self, new_salary):
        self.salary = new_salary

    def transfer(self, new_department):
        self.department = new_department

    @classmethod
    def get_employees_by_department(cls, department):
        department_employees = []
        for i in cls.all_employees:
            if i.department == department:
                department_employees.append(str(i))
        return department_employees

    @classmethod
    def get_employees_by_salary(cls, salary):
        salary_employees = []
        for i in cls.all_employees:
            if i.salary >= salary:
                salary_employees.append(str(i))
        return salary_employees

    def __str__(self):
        return f"{self.name} from {self.department}"

# Example Usage:
employee1 = Employee("Alice", 50000, "HR")
employee2 = Employee("Bob", 60000, "Finance")
employee3 = Employee("Mohamad", 40000, "Tech")
employee4 = Employee("Sam", 55000, "Finance")
employee5 = Employee("Mik", 45000, "Tech")
employee6 = Employee("Monica", 65000, "HR")
hr_employees = Employee.get_employees_by_department("HR")
print(hr_employees)  # Output: ['Alice']